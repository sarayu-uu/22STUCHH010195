{"ast":null,"code":"import { storageService } from './storage';\nimport { log } from './logger';\nexport class ValidationService {\n  static validateUrl(url) {\n    if (!url.trim()) {\n      log.warn('api', 'URL validation failed: empty URL');\n      return {\n        field: 'url',\n        message: 'URL is required'\n      };\n    }\n    try {\n      const urlObj = new URL(url);\n      if (!['http:', 'https:'].includes(urlObj.protocol)) {\n        log.warn('api', `URL validation failed: invalid protocol ${urlObj.protocol}`);\n        return {\n          field: 'url',\n          message: 'URL must use HTTP or HTTPS protocol'\n        };\n      }\n      return null;\n    } catch (error) {\n      log.warn('api', `URL validation failed: invalid format - ${url}`);\n      return {\n        field: 'url',\n        message: 'Please enter a valid URL'\n      };\n    }\n  }\n  static validateValidityMinutes(minutes) {\n    if (minutes === undefined) return null;\n    if (minutes < 1) {\n      log.warn('api', `Validity validation failed: ${minutes} minutes too low`);\n      return {\n        field: 'validityMinutes',\n        message: 'Validity must be at least 1 minute'\n      };\n    }\n    if (minutes > 525600) {\n      // 1 year in minutes\n      log.warn('api', `Validity validation failed: ${minutes} minutes too high`);\n      return {\n        field: 'validityMinutes',\n        message: 'Validity cannot exceed 1 year'\n      };\n    }\n    return null;\n  }\n  static validateCustomShortCode(shortCode) {\n    if (!shortCode) return null;\n    if (shortCode.length < 3) {\n      log.warn('api', `ShortCode validation failed: ${shortCode} too short`);\n      return {\n        field: 'customShortCode',\n        message: 'Custom shortcode must be at least 3 characters'\n      };\n    }\n    if (shortCode.length > 20) {\n      log.warn('api', `ShortCode validation failed: ${shortCode} too long`);\n      return {\n        field: 'customShortCode',\n        message: 'Custom shortcode cannot exceed 20 characters'\n      };\n    }\n    if (!/^[a-zA-Z0-9]+$/.test(shortCode)) {\n      log.warn('api', `ShortCode validation failed: ${shortCode} contains invalid characters`);\n      return {\n        field: 'customShortCode',\n        message: 'Custom shortcode must be alphanumeric only'\n      };\n    }\n    if (storageService.isShortCodeExists(shortCode)) {\n      log.warn('api', `ShortCode validation failed: ${shortCode} already exists`);\n      return {\n        field: 'customShortCode',\n        message: 'This shortcode is already taken'\n      };\n    }\n    return null;\n  }\n  static validateUrlSubmission(data) {\n    const errors = [];\n    const urlError = this.validateUrl(data.url);\n    if (urlError) errors.push(urlError);\n    const validityError = this.validateValidityMinutes(data.validityMinutes);\n    if (validityError) errors.push(validityError);\n    const shortCodeError = this.validateCustomShortCode(data.customShortCode);\n    if (shortCodeError) errors.push(shortCodeError);\n    if (errors.length > 0) {\n      log.warn('api', `URL submission validation failed with ${errors.length} errors`);\n    }\n    return errors;\n  }\n  static validateUrlBatch(urls) {\n    const batchErrors = {};\n    if (urls.length === 0) {\n      log.warn('api', 'Batch validation failed: no URLs provided');\n      batchErrors[0] = [{\n        field: 'batch',\n        message: 'At least one URL is required'\n      }];\n      return batchErrors;\n    }\n    if (urls.length > 5) {\n      log.warn('api', `Batch validation failed: ${urls.length} URLs exceeds limit`);\n      batchErrors[0] = [{\n        field: 'batch',\n        message: 'Maximum 5 URLs allowed at once'\n      }];\n      return batchErrors;\n    }\n    urls.forEach((urlData, index) => {\n      const errors = this.validateUrlSubmission(urlData);\n      if (errors.length > 0) {\n        batchErrors[index] = errors;\n      }\n    });\n    return batchErrors;\n  }\n}\nexport const validationService = ValidationService;","map":{"version":3,"names":["storageService","log","ValidationService","validateUrl","url","trim","warn","field","message","urlObj","URL","includes","protocol","error","validateValidityMinutes","minutes","undefined","validateCustomShortCode","shortCode","length","test","isShortCodeExists","validateUrlSubmission","data","errors","urlError","push","validityError","validityMinutes","shortCodeError","customShortCode","validateUrlBatch","urls","batchErrors","forEach","urlData","index","validationService"],"sources":["C:/Users/ameya/Desktop/affordmed/src/utils/validation.ts"],"sourcesContent":["import { ValidationError, UrlSubmissionData } from '../types';\r\nimport { storageService } from './storage';\r\nimport { log } from './logger';\r\n\r\nexport class ValidationService {\r\n  static validateUrl(url: string): ValidationError | null {\r\n    if (!url.trim()) {\r\n      log.warn('api', 'URL validation failed: empty URL');\r\n      return { field: 'url', message: 'URL is required' };\r\n    }\r\n\r\n    try {\r\n      const urlObj = new URL(url);\r\n      if (!['http:', 'https:'].includes(urlObj.protocol)) {\r\n        log.warn('api', `URL validation failed: invalid protocol ${urlObj.protocol}`);\r\n        return { field: 'url', message: 'URL must use HTTP or HTTPS protocol' };\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      log.warn('api', `URL validation failed: invalid format - ${url}`);\r\n      return { field: 'url', message: 'Please enter a valid URL' };\r\n    }\r\n  }\r\n\r\n  static validateValidityMinutes(minutes: number | undefined): ValidationError | null {\r\n    if (minutes === undefined) return null;\r\n    \r\n    if (minutes < 1) {\r\n      log.warn('api', `Validity validation failed: ${minutes} minutes too low`);\r\n      return { field: 'validityMinutes', message: 'Validity must be at least 1 minute' };\r\n    }\r\n    \r\n    if (minutes > 525600) { // 1 year in minutes\r\n      log.warn('api', `Validity validation failed: ${minutes} minutes too high`);\r\n      return { field: 'validityMinutes', message: 'Validity cannot exceed 1 year' };\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  static validateCustomShortCode(shortCode: string | undefined): ValidationError | null {\r\n    if (!shortCode) return null;\r\n    \r\n    if (shortCode.length < 3) {\r\n      log.warn('api', `ShortCode validation failed: ${shortCode} too short`);\r\n      return { field: 'customShortCode', message: 'Custom shortcode must be at least 3 characters' };\r\n    }\r\n    \r\n    if (shortCode.length > 20) {\r\n      log.warn('api', `ShortCode validation failed: ${shortCode} too long`);\r\n      return { field: 'customShortCode', message: 'Custom shortcode cannot exceed 20 characters' };\r\n    }\r\n    \r\n    if (!/^[a-zA-Z0-9]+$/.test(shortCode)) {\r\n      log.warn('api', `ShortCode validation failed: ${shortCode} contains invalid characters`);\r\n      return { field: 'customShortCode', message: 'Custom shortcode must be alphanumeric only' };\r\n    }\r\n    \r\n    if (storageService.isShortCodeExists(shortCode)) {\r\n      log.warn('api', `ShortCode validation failed: ${shortCode} already exists`);\r\n      return { field: 'customShortCode', message: 'This shortcode is already taken' };\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  static validateUrlSubmission(data: UrlSubmissionData): ValidationError[] {\r\n    const errors: ValidationError[] = [];\r\n    \r\n    const urlError = this.validateUrl(data.url);\r\n    if (urlError) errors.push(urlError);\r\n    \r\n    const validityError = this.validateValidityMinutes(data.validityMinutes);\r\n    if (validityError) errors.push(validityError);\r\n    \r\n    const shortCodeError = this.validateCustomShortCode(data.customShortCode);\r\n    if (shortCodeError) errors.push(shortCodeError);\r\n    \r\n    if (errors.length > 0) {\r\n      log.warn('api', `URL submission validation failed with ${errors.length} errors`);\r\n    }\r\n    \r\n    return errors;\r\n  }\r\n\r\n  static validateUrlBatch(urls: UrlSubmissionData[]): { [index: number]: ValidationError[] } {\r\n    const batchErrors: { [index: number]: ValidationError[] } = {};\r\n    \r\n    if (urls.length === 0) {\r\n      log.warn('api', 'Batch validation failed: no URLs provided');\r\n      batchErrors[0] = [{ field: 'batch', message: 'At least one URL is required' }];\r\n      return batchErrors;\r\n    }\r\n    \r\n    if (urls.length > 5) {\r\n      log.warn('api', `Batch validation failed: ${urls.length} URLs exceeds limit`);\r\n      batchErrors[0] = [{ field: 'batch', message: 'Maximum 5 URLs allowed at once' }];\r\n      return batchErrors;\r\n    }\r\n    \r\n    urls.forEach((urlData, index) => {\r\n      const errors = this.validateUrlSubmission(urlData);\r\n      if (errors.length > 0) {\r\n        batchErrors[index] = errors;\r\n      }\r\n    });\r\n    \r\n    return batchErrors;\r\n  }\r\n}\r\n\r\nexport const validationService = ValidationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}