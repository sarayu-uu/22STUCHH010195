{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { urlService } from '../services/urlService';\nimport { log } from '../utils/logger';\nexport const useUrlRedirect = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const redirectToUrl = useCallback(async shortCode => {\n    try {\n      log.info('hook', `useUrlRedirect: Attempting redirect for shortcode: ${shortCode}`);\n      setLoading(true);\n      setError(null);\n      const originalUrl = await urlService.redirectToOriginal(shortCode);\n      log.info('hook', `useUrlRedirect: Successful redirect to ${originalUrl}`);\n      return originalUrl;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      let errorType = 'unknown';\n      if (errorMessage.includes('not found')) {\n        errorType = 'validation';\n      } else if (errorMessage.includes('expired')) {\n        errorType = 'expired';\n      }\n      const appError = {\n        type: errorType,\n        message: errorMessage,\n        details: `Failed to redirect shortcode: ${shortCode}`\n      };\n      setError(appError);\n      log.error('hook', `useUrlRedirect: Error redirecting ${shortCode} - ${errorMessage}`);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n    log.debug('hook', 'useUrlRedirect: Error cleared');\n  }, []);\n  return {\n    loading,\n    error,\n    redirectToUrl,\n    clearError\n  };\n};\n_s(useUrlRedirect, \"0qfVBbPvOZpWpQo8RwrOmkCPQac=\");","map":{"version":3,"names":["useState","useCallback","urlService","log","useUrlRedirect","_s","loading","setLoading","error","setError","redirectToUrl","shortCode","info","originalUrl","redirectToOriginal","err","errorMessage","Error","message","errorType","includes","appError","type","details","clearError","debug"],"sources":["C:/Users/ameya/Desktop/affordmed/src/hooks/useUrlRedirect.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { AppError } from '../types';\r\nimport { urlService } from '../services/urlService';\r\nimport { log } from '../utils/logger';\r\n\r\ninterface UseUrlRedirectReturn {\r\n  loading: boolean;\r\n  error: AppError | null;\r\n  redirectToUrl: (shortCode: string) => Promise<string | null>;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useUrlRedirect = (): UseUrlRedirectReturn => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<AppError | null>(null);\r\n\r\n  const redirectToUrl = useCallback(async (shortCode: string): Promise<string | null> => {\r\n    try {\r\n      log.info('hook', `useUrlRedirect: Attempting redirect for shortcode: ${shortCode}`);\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const originalUrl = await urlService.redirectToOriginal(shortCode);\r\n      \r\n      log.info('hook', `useUrlRedirect: Successful redirect to ${originalUrl}`);\r\n      return originalUrl;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n      let errorType: AppError['type'] = 'unknown';\r\n      \r\n      if (errorMessage.includes('not found')) {\r\n        errorType = 'validation';\r\n      } else if (errorMessage.includes('expired')) {\r\n        errorType = 'expired';\r\n      }\r\n      \r\n      const appError: AppError = {\r\n        type: errorType,\r\n        message: errorMessage,\r\n        details: `Failed to redirect shortcode: ${shortCode}`\r\n      };\r\n      \r\n      setError(appError);\r\n      log.error('hook', `useUrlRedirect: Error redirecting ${shortCode} - ${errorMessage}`);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    log.debug('hook', 'useUrlRedirect: Error cleared');\r\n  }, []);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    redirectToUrl,\r\n    clearError,\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,GAAG,QAAQ,iBAAiB;AASrC,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAA4B;EAAAC,EAAA;EACxD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAkB,IAAI,CAAC;EAEzD,MAAMU,aAAa,GAAGT,WAAW,CAAC,MAAOU,SAAiB,IAA6B;IACrF,IAAI;MACFR,GAAG,CAACS,IAAI,CAAC,MAAM,EAAE,sDAAsDD,SAAS,EAAE,CAAC;MACnFJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMI,WAAW,GAAG,MAAMX,UAAU,CAACY,kBAAkB,CAACH,SAAS,CAAC;MAElER,GAAG,CAACS,IAAI,CAAC,MAAM,EAAE,0CAA0CC,WAAW,EAAE,CAAC;MACzE,OAAOA,WAAW;IACpB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAGD,GAAG,YAAYE,KAAK,GAAGF,GAAG,CAACG,OAAO,GAAG,wBAAwB;MAClF,IAAIC,SAA2B,GAAG,SAAS;MAE3C,IAAIH,YAAY,CAACI,QAAQ,CAAC,WAAW,CAAC,EAAE;QACtCD,SAAS,GAAG,YAAY;MAC1B,CAAC,MAAM,IAAIH,YAAY,CAACI,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC3CD,SAAS,GAAG,SAAS;MACvB;MAEA,MAAME,QAAkB,GAAG;QACzBC,IAAI,EAAEH,SAAS;QACfD,OAAO,EAAEF,YAAY;QACrBO,OAAO,EAAE,iCAAiCZ,SAAS;MACrD,CAAC;MAEDF,QAAQ,CAACY,QAAQ,CAAC;MAClBlB,GAAG,CAACK,KAAK,CAAC,MAAM,EAAE,qCAAqCG,SAAS,MAAMK,YAAY,EAAE,CAAC;MACrF,OAAO,IAAI;IACb,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMiB,UAAU,GAAGvB,WAAW,CAAC,MAAM;IACnCQ,QAAQ,CAAC,IAAI,CAAC;IACdN,GAAG,CAACsB,KAAK,CAAC,MAAM,EAAE,+BAA+B,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLnB,OAAO;IACPE,KAAK;IACLE,aAAa;IACbc;EACF,CAAC;AACH,CAAC;AAACnB,EAAA,CAjDWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}