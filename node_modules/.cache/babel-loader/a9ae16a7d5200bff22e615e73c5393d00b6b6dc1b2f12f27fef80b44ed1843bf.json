{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { urlService } from '../services/urlService';\nimport { log } from '../utils/logger';\nexport const useUrlStats = () => {\n  _s();\n  const [urls, setUrls] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const loadStats = useCallback(() => {\n    try {\n      log.info('hook', 'useUrlStats: Loading URL statistics');\n      setLoading(true);\n      const allUrls = urlService.getAllUrls();\n      setUrls(allUrls);\n      log.info('hook', `useUrlStats: Loaded ${allUrls.length} URLs`);\n    } catch (error) {\n      log.error('hook', `useUrlStats: Error loading statistics - ${error}`);\n      setUrls([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const refreshStats = useCallback(() => {\n    log.info('hook', 'useUrlStats: Refreshing statistics');\n    loadStats();\n  }, [loadStats]);\n  const getUrlByShortCode = useCallback(shortCode => {\n    const url = urls.find(u => u.shortCode === shortCode);\n    if (url) {\n      log.debug('hook', `useUrlStats: Found URL for shortcode ${shortCode}`);\n    } else {\n      log.warn('hook', `useUrlStats: No URL found for shortcode ${shortCode}`);\n    }\n    return url;\n  }, [urls]);\n  useEffect(() => {\n    loadStats();\n  }, [loadStats]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      log.debug('hook', 'useUrlStats: Auto-refreshing statistics');\n      loadStats();\n    }, 30000);\n    return () => {\n      clearInterval(interval);\n      log.debug('hook', 'useUrlStats: Auto-refresh interval cleared');\n    };\n  }, [loadStats]);\n  return {\n    urls,\n    loading,\n    refreshStats,\n    getUrlByShortCode\n  };\n};\n_s(useUrlStats, \"a0Tp31IwhksIBjvD6Bbve9wZSg4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","urlService","log","useUrlStats","_s","urls","setUrls","loading","setLoading","loadStats","info","allUrls","getAllUrls","length","error","refreshStats","getUrlByShortCode","shortCode","url","find","u","debug","warn","interval","setInterval","clearInterval"],"sources":["C:/Users/ameya/Desktop/affordmed/src/hooks/useUrlStats.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { ShortenedUrl } from '../types';\r\nimport { urlService } from '../services/urlService';\r\nimport { log } from '../utils/logger';\r\n\r\ninterface UseUrlStatsReturn {\r\n  urls: ShortenedUrl[];\r\n  loading: boolean;\r\n  refreshStats: () => void;\r\n  getUrlByShortCode: (shortCode: string) => ShortenedUrl | undefined;\r\n}\r\n\r\nexport const useUrlStats = (): UseUrlStatsReturn => {\r\n  const [urls, setUrls] = useState<ShortenedUrl[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const loadStats = useCallback(() => {\r\n    try {\r\n      log.info('hook', 'useUrlStats: Loading URL statistics');\r\n      setLoading(true);\r\n      \r\n      const allUrls = urlService.getAllUrls();\r\n      setUrls(allUrls);\r\n      \r\n      log.info('hook', `useUrlStats: Loaded ${allUrls.length} URLs`);\r\n    } catch (error) {\r\n      log.error('hook', `useUrlStats: Error loading statistics - ${error}`);\r\n      setUrls([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const refreshStats = useCallback(() => {\r\n    log.info('hook', 'useUrlStats: Refreshing statistics');\r\n    loadStats();\r\n  }, [loadStats]);\r\n\r\n  const getUrlByShortCode = useCallback((shortCode: string): ShortenedUrl | undefined => {\r\n    const url = urls.find(u => u.shortCode === shortCode);\r\n    if (url) {\r\n      log.debug('hook', `useUrlStats: Found URL for shortcode ${shortCode}`);\r\n    } else {\r\n      log.warn('hook', `useUrlStats: No URL found for shortcode ${shortCode}`);\r\n    }\r\n    return url;\r\n  }, [urls]);\r\n\r\n  useEffect(() => {\r\n    loadStats();\r\n  }, [loadStats]);\r\n\r\n  // Auto-refresh every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      log.debug('hook', 'useUrlStats: Auto-refreshing statistics');\r\n      loadStats();\r\n    }, 30000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      log.debug('hook', 'useUrlStats: Auto-refresh interval cleared');\r\n    };\r\n  }, [loadStats]);\r\n\r\n  return {\r\n    urls,\r\n    loading,\r\n    refreshStats,\r\n    getUrlByShortCode,\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,GAAG,QAAQ,iBAAiB;AASrC,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAyB;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAiB,EAAE,CAAC;EACpD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMW,SAAS,GAAGT,WAAW,CAAC,MAAM;IAClC,IAAI;MACFE,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAE,qCAAqC,CAAC;MACvDF,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMG,OAAO,GAAGV,UAAU,CAACW,UAAU,CAAC,CAAC;MACvCN,OAAO,CAACK,OAAO,CAAC;MAEhBT,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAE,uBAAuBC,OAAO,CAACE,MAAM,OAAO,CAAC;IAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdZ,GAAG,CAACY,KAAK,CAAC,MAAM,EAAE,2CAA2CA,KAAK,EAAE,CAAC;MACrER,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,YAAY,GAAGf,WAAW,CAAC,MAAM;IACrCE,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAE,oCAAoC,CAAC;IACtDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMO,iBAAiB,GAAGhB,WAAW,CAAEiB,SAAiB,IAA+B;IACrF,MAAMC,GAAG,GAAGb,IAAI,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,SAAS,KAAKA,SAAS,CAAC;IACrD,IAAIC,GAAG,EAAE;MACPhB,GAAG,CAACmB,KAAK,CAAC,MAAM,EAAE,wCAAwCJ,SAAS,EAAE,CAAC;IACxE,CAAC,MAAM;MACLf,GAAG,CAACoB,IAAI,CAAC,MAAM,EAAE,2CAA2CL,SAAS,EAAE,CAAC;IAC1E;IACA,OAAOC,GAAG;EACZ,CAAC,EAAE,CAACb,IAAI,CAAC,CAAC;EAEVN,SAAS,CAAC,MAAM;IACdU,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACAV,SAAS,CAAC,MAAM;IACd,MAAMwB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCtB,GAAG,CAACmB,KAAK,CAAC,MAAM,EAAE,yCAAyC,CAAC;MAC5DZ,SAAS,CAAC,CAAC;IACb,CAAC,EAAE,KAAK,CAAC;IAET,OAAO,MAAM;MACXgB,aAAa,CAACF,QAAQ,CAAC;MACvBrB,GAAG,CAACmB,KAAK,CAAC,MAAM,EAAE,4CAA4C,CAAC;IACjE,CAAC;EACH,CAAC,EAAE,CAACZ,SAAS,CAAC,CAAC;EAEf,OAAO;IACLJ,IAAI;IACJE,OAAO;IACPQ,YAAY;IACZC;EACF,CAAC;AACH,CAAC;AAACZ,EAAA,CA3DWD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}