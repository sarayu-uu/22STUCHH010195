{"ast":null,"code":"var _UrlService;\nimport { storageService } from '../utils/storage';\nimport { validationService } from '../utils/validation';\nimport { log } from '../utils/logger';\nexport class UrlService {\n  static getInstance() {\n    if (!UrlService.instance) {\n      UrlService.instance = new UrlService();\n    }\n    return UrlService.instance;\n  }\n  constructor() {\n    log.info('api', 'URL service initialized');\n  }\n  generateShortCode() {\n    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    do {\n      result = '';\n      for (let i = 0; i < 6; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n    } while (storageService.isShortCodeExists(result));\n    return result;\n  }\n  generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n  async shortenUrl(data) {\n    try {\n      log.info('api', `Attempting to shorten URL: ${data.url}`);\n      const errors = validationService.validateUrlSubmission(data);\n      if (errors.length > 0) {\n        const errorMessages = errors.map(e => e.message).join(', ');\n        log.error('api', `URL shortening failed validation: ${errorMessages}`);\n        throw new Error(`Validation failed: ${errorMessages}`);\n      }\n      const shortCode = data.customShortCode || this.generateShortCode();\n      const validityMinutes = data.validityMinutes || 30;\n      const createdAt = new Date();\n      const expiresAt = new Date(createdAt.getTime() + validityMinutes * 60 * 1000);\n      const shortenedUrl = {\n        id: this.generateId(),\n        originalUrl: data.url,\n        shortCode,\n        createdAt,\n        expiresAt,\n        validityMinutes,\n        clicks: [],\n        isExpired: false\n      };\n      storageService.saveUrl(shortenedUrl);\n      log.info('api', `URL shortened successfully: ${data.url} -> ${shortCode}`);\n      return shortenedUrl;\n    } catch (error) {\n      log.error('api', `Failed to shorten URL: ${error}`);\n      throw error;\n    }\n  }\n  async shortenUrls(urls) {\n    try {\n      log.info('api', `Attempting to shorten ${urls.length} URLs`);\n      const batchErrors = validationService.validateUrlBatch(urls);\n      if (Object.keys(batchErrors).length > 0) {\n        const errorCount = Object.keys(batchErrors).length;\n        log.error('api', `Batch URL shortening failed validation for ${errorCount} URLs`);\n        throw new Error('Batch validation failed');\n      }\n      const results = [];\n      for (const urlData of urls) {\n        try {\n          const result = await this.shortenUrl(urlData);\n          results.push(result);\n        } catch (error) {\n          log.error('api', `Failed to shorten individual URL in batch: ${urlData.url}`);\n          throw error;\n        }\n      }\n      log.info('api', `Successfully shortened ${results.length} URLs`);\n      return results;\n    } catch (error) {\n      log.error('api', `Batch URL shortening failed: ${error}`);\n      throw error;\n    }\n  }\n  async redirectToOriginal(shortCode) {\n    try {\n      log.info('api', `Attempting to redirect shortcode: ${shortCode}`);\n      const url = storageService.getUrlByShortCode(shortCode);\n      if (!url) {\n        log.warn('api', `Shortcode not found: ${shortCode}`);\n        throw new Error('Short URL not found');\n      }\n      if (url.isExpired) {\n        log.warn('api', `Attempted to access expired shortcode: ${shortCode}`);\n        throw new Error('This short URL has expired');\n      }\n\n      // Record the click\n      const clickData = {\n        timestamp: new Date(),\n        referrer: document.referrer || 'direct',\n        userAgent: navigator.userAgent,\n        geolocation: await this.getMockGeolocation()\n      };\n      storageService.addClick(shortCode, clickData);\n      log.info('api', `Successful redirect: ${shortCode} -> ${url.originalUrl}`);\n      return url.originalUrl;\n    } catch (error) {\n      log.error('api', `Redirect failed for shortcode ${shortCode}: ${error}`);\n      throw error;\n    }\n  }\n  async getMockGeolocation() {\n    // Mock geolocation data since we can't access real geolocation without user permission\n    const mockLocations = [{\n      country: 'United States',\n      city: 'New York',\n      ip: '192.168.1.1'\n    }, {\n      country: 'United Kingdom',\n      city: 'London',\n      ip: '192.168.1.2'\n    }, {\n      country: 'Germany',\n      city: 'Berlin',\n      ip: '192.168.1.3'\n    }, {\n      country: 'France',\n      city: 'Paris',\n      ip: '192.168.1.4'\n    }, {\n      country: 'Japan',\n      city: 'Tokyo',\n      ip: '192.168.1.5'\n    }];\n    return mockLocations[Math.floor(Math.random() * mockLocations.length)];\n  }\n  getAllUrls() {\n    try {\n      const urls = storageService.getAllUrls();\n      log.info('api', `Retrieved ${urls.length} URLs from storage`);\n      return urls;\n    } catch (error) {\n      log.error('api', `Failed to retrieve URLs: ${error}`);\n      return [];\n    }\n  }\n  getUrlStats(shortCode) {\n    try {\n      const url = storageService.getUrlByShortCode(shortCode);\n      if (url) {\n        log.info('api', `Retrieved stats for shortcode: ${shortCode}`);\n      } else {\n        log.warn('api', `Stats requested for non-existent shortcode: ${shortCode}`);\n      }\n      return url;\n    } catch (error) {\n      log.error('api', `Failed to retrieve stats for ${shortCode}: ${error}`);\n      return null;\n    }\n  }\n  cleanupExpiredUrls() {\n    try {\n      storageService.clearExpiredUrls();\n      log.info('api', 'Expired URLs cleanup completed');\n    } catch (error) {\n      log.error('api', `Failed to cleanup expired URLs: ${error}`);\n    }\n  }\n}\n_UrlService = UrlService;\nUrlService.instance = void 0;\nexport const urlService = UrlService.getInstance();","map":{"version":3,"names":["storageService","validationService","log","UrlService","getInstance","instance","constructor","info","generateShortCode","chars","result","i","charAt","Math","floor","random","length","isShortCodeExists","generateId","Date","now","toString","substr","shortenUrl","data","url","errors","validateUrlSubmission","errorMessages","map","e","message","join","error","Error","shortCode","customShortCode","validityMinutes","createdAt","expiresAt","getTime","shortenedUrl","id","originalUrl","clicks","isExpired","saveUrl","shortenUrls","urls","batchErrors","validateUrlBatch","Object","keys","errorCount","results","urlData","push","redirectToOriginal","getUrlByShortCode","warn","clickData","timestamp","referrer","document","userAgent","navigator","geolocation","getMockGeolocation","addClick","mockLocations","country","city","ip","getAllUrls","getUrlStats","cleanupExpiredUrls","clearExpiredUrls","_UrlService","urlService"],"sources":["C:/Users/ameya/Desktop/affordmed/src/services/urlService.ts"],"sourcesContent":["import { ShortenedUrl, UrlSubmissionData, ClickData, GeolocationData } from '../types';\r\nimport { storageService } from '../utils/storage';\r\nimport { validationService } from '../utils/validation';\r\nimport { log } from '../utils/logger';\r\n\r\nexport class UrlService {\r\n  private static instance: UrlService;\r\n\r\n  static getInstance(): UrlService {\r\n    if (!UrlService.instance) {\r\n      UrlService.instance = new UrlService();\r\n    }\r\n    return UrlService.instance;\r\n  }\r\n\r\n  private constructor() {\r\n    log.info('api', 'URL service initialized');\r\n  }\r\n\r\n  private generateShortCode(): string {\r\n    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n    let result = '';\r\n    \r\n    do {\r\n      result = '';\r\n      for (let i = 0; i < 6; i++) {\r\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n      }\r\n    } while (storageService.isShortCodeExists(result));\r\n    \r\n    return result;\r\n  }\r\n\r\n  private generateId(): string {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n  }\r\n\r\n  async shortenUrl(data: UrlSubmissionData): Promise<ShortenedUrl> {\r\n    try {\r\n      log.info('api', `Attempting to shorten URL: ${data.url}`);\r\n      \r\n      const errors = validationService.validateUrlSubmission(data);\r\n      if (errors.length > 0) {\r\n        const errorMessages = errors.map(e => e.message).join(', ');\r\n        log.error('api', `URL shortening failed validation: ${errorMessages}`);\r\n        throw new Error(`Validation failed: ${errorMessages}`);\r\n      }\r\n\r\n      const shortCode = data.customShortCode || this.generateShortCode();\r\n      const validityMinutes = data.validityMinutes || 30;\r\n      const createdAt = new Date();\r\n      const expiresAt = new Date(createdAt.getTime() + validityMinutes * 60 * 1000);\r\n\r\n      const shortenedUrl: ShortenedUrl = {\r\n        id: this.generateId(),\r\n        originalUrl: data.url,\r\n        shortCode,\r\n        createdAt,\r\n        expiresAt,\r\n        validityMinutes,\r\n        clicks: [],\r\n        isExpired: false,\r\n      };\r\n\r\n      storageService.saveUrl(shortenedUrl);\r\n      log.info('api', `URL shortened successfully: ${data.url} -> ${shortCode}`);\r\n      \r\n      return shortenedUrl;\r\n    } catch (error) {\r\n      log.error('api', `Failed to shorten URL: ${error}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async shortenUrls(urls: UrlSubmissionData[]): Promise<ShortenedUrl[]> {\r\n    try {\r\n      log.info('api', `Attempting to shorten ${urls.length} URLs`);\r\n      \r\n      const batchErrors = validationService.validateUrlBatch(urls);\r\n      if (Object.keys(batchErrors).length > 0) {\r\n        const errorCount = Object.keys(batchErrors).length;\r\n        log.error('api', `Batch URL shortening failed validation for ${errorCount} URLs`);\r\n        throw new Error('Batch validation failed');\r\n      }\r\n\r\n      const results: ShortenedUrl[] = [];\r\n      \r\n      for (const urlData of urls) {\r\n        try {\r\n          const result = await this.shortenUrl(urlData);\r\n          results.push(result);\r\n        } catch (error) {\r\n          log.error('api', `Failed to shorten individual URL in batch: ${urlData.url}`);\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      log.info('api', `Successfully shortened ${results.length} URLs`);\r\n      return results;\r\n    } catch (error) {\r\n      log.error('api', `Batch URL shortening failed: ${error}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async redirectToOriginal(shortCode: string): Promise<string> {\r\n    try {\r\n      log.info('api', `Attempting to redirect shortcode: ${shortCode}`);\r\n      \r\n      const url = storageService.getUrlByShortCode(shortCode);\r\n      \r\n      if (!url) {\r\n        log.warn('api', `Shortcode not found: ${shortCode}`);\r\n        throw new Error('Short URL not found');\r\n      }\r\n\r\n      if (url.isExpired) {\r\n        log.warn('api', `Attempted to access expired shortcode: ${shortCode}`);\r\n        throw new Error('This short URL has expired');\r\n      }\r\n\r\n      // Record the click\r\n      const clickData: ClickData = {\r\n        timestamp: new Date(),\r\n        referrer: document.referrer || 'direct',\r\n        userAgent: navigator.userAgent,\r\n        geolocation: await this.getMockGeolocation(),\r\n      };\r\n\r\n      storageService.addClick(shortCode, clickData);\r\n      log.info('api', `Successful redirect: ${shortCode} -> ${url.originalUrl}`);\r\n      \r\n      return url.originalUrl;\r\n    } catch (error) {\r\n      log.error('api', `Redirect failed for shortcode ${shortCode}: ${error}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async getMockGeolocation(): Promise<GeolocationData> {\r\n    // Mock geolocation data since we can't access real geolocation without user permission\r\n    const mockLocations = [\r\n      { country: 'United States', city: 'New York', ip: '192.168.1.1' },\r\n      { country: 'United Kingdom', city: 'London', ip: '192.168.1.2' },\r\n      { country: 'Germany', city: 'Berlin', ip: '192.168.1.3' },\r\n      { country: 'France', city: 'Paris', ip: '192.168.1.4' },\r\n      { country: 'Japan', city: 'Tokyo', ip: '192.168.1.5' },\r\n    ];\r\n    \r\n    return mockLocations[Math.floor(Math.random() * mockLocations.length)];\r\n  }\r\n\r\n  getAllUrls(): ShortenedUrl[] {\r\n    try {\r\n      const urls = storageService.getAllUrls();\r\n      log.info('api', `Retrieved ${urls.length} URLs from storage`);\r\n      return urls;\r\n    } catch (error) {\r\n      log.error('api', `Failed to retrieve URLs: ${error}`);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getUrlStats(shortCode: string): ShortenedUrl | null {\r\n    try {\r\n      const url = storageService.getUrlByShortCode(shortCode);\r\n      if (url) {\r\n        log.info('api', `Retrieved stats for shortcode: ${shortCode}`);\r\n      } else {\r\n        log.warn('api', `Stats requested for non-existent shortcode: ${shortCode}`);\r\n      }\r\n      return url;\r\n    } catch (error) {\r\n      log.error('api', `Failed to retrieve stats for ${shortCode}: ${error}`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  cleanupExpiredUrls(): void {\r\n    try {\r\n      storageService.clearExpiredUrls();\r\n      log.info('api', 'Expired URLs cleanup completed');\r\n    } catch (error) {\r\n      log.error('api', `Failed to cleanup expired URLs: ${error}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport const urlService = UrlService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}